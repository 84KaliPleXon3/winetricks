#!/bin/sh
# Regression test for winetricks-alpha

set -x

# verbs known to not work in -q mode yet
BLACKLIST="cygwin|kde|psdk2003|psdkwin7"

# Check for programs this script (or winetricks) uses.  
# Better to find out they're missing now than in the
# middle of a two day run.
for tool in time cabextract unzip 7z
do
    if test "`which $tool`" = ""
    then
        echo "Please install $tool."
        exit 1
    fi
done

errors=0
fail()
{
    echo FAIL: $@
    errors=`expr $errors + 1`
}

case "$LANG" in
""|"C") echo "Some games won't install in the Posix locale; doing 'export LANG=en_US.UTF-8'" ; export LANG=en_US.UTF-8;;
esac

case "$OS" in
 "Windows_NT")
    # Mostly unimplemented...
    # Cheezy fix for getting rid of double slashes when running cygwin in wine
    case "$HOME" in
      /) HOME="" ;;
    esac
    WINE=""
    WINESERVER=true
    DRIVE_C="C:/"
    ;;
 *)
    export WINE=${WINE:-wine}
    export WINESERVER=${WINESERVER:-wineserver}
    ;;
esac

srcdir=`dirname $0`
srcdir=`cd $srcdir; pwd`

test_speed()
{
    /usr/bin/time -p --output=time.log sh winetricks-alpha $1
    seconds=`awk '/real/ {print $2}' < time.log | sed 's/\..*//'`
    echo test_speed: winetricks-alpha $1 took $seconds seconds
    # Longest runtime as of 11 Dec 2010 is 5 seconds on an e8400 with cygwin
    if test $seconds -gt 7
    then
        fail "test_speed: winetricks-alpha $1 took $seconds seconds"
    fi
}

test_app_checksums()
{
    # Verify the installation
    if [ -f "$srcdir/winetricksverify.d/$app.sha1sum" ]
    then
        windir="`$WINE cmd /c echo "%windir%" | cut -c 4- | tr -d '\015'`"
        progdir="`$WINE cmd /c echo "%ProgramFiles%" | cut -c 4- | tr -d '\015'`"

        cd "$DRIVE_C"
        # Fix up the filenames, which can differ between Windows versions/Wine:
        # FIXME: we need a way to guarantee that all _original_ .sha1sums are the same.
        # Preferably generated under 32-bit wine, so that we don't need a really complex sed
        # substitution here...
        sed -e "s|/Program\ Files/|/$progdir/|" -e "s|/windows/|/$windir/|" < "$srcdir/winetricksverify.d/$app.sha1sum" > $app.sha1sum.tmp
        if ! sha1sum -c $app.sha1sum.tmp 
        then
            fail "test_app_checksum $app !" 
        fi
        rm $app.sha1sum.tmp
        cd $srcdir
    fi
}

test_app()
{
    app=$1

    export WINEPREFIX=$HOME/winetrickstest-prefixes/$app
    DRIVE_C="$WINEPREFIX/dosdevices/c:"

    # change if you don't want to skip ones already installed
    if test -d $HOME/winetrickstest-prefixes/$app
    then
        echo "Skipping $app, already installed"
        return 0
        #rm -rf $WINEPREFIX
    fi
    mkdir -p $WINEPREFIX

    # Watch transient disk space
    DF_START=`df $WINEPREFIX | awk '/\// { print $4 }' `
    if test -d ~/.cache/winetricks/$app
    then
        DU_CACHE_START=`du -s ~/.cache/winetricks/$app | awk '{print $1}'`
    else
        DU_CACHE_START=0
    fi
    touch df-daemon
    (set +x; while test -f df-daemon; do df $WINEPREFIX ; sleep 1; done ) > df-during.log &

    # Isolate us from the user's home directory
    sh -x winetricks-alpha sandbox

    echo "Installing $app"
    if ! /usr/bin/time -p --output=time.log sh winetricks-alpha -q $app
    then
        rm df-daemon
        fail "test_app $app failed!"
        return
    fi
    rm df-daemon
    seconds=`awk '/real/ {print $2}' < time.log | sed 's/\..*//'`
    echo "test_app: ${app}: install_time $seconds seconds."

    # Total max disk usage = max df change plus any initial blocks in cache
    DF_MIN=`cat df-during.log | awk '/\// { if (min == "" || $4 < min) min=$4; } END {print min}' `
    DF_DIFF=`expr $DF_START - $DF_MIN`
    TOTAL=`expr $DF_DIFF + $DU_CACHE_START`
    echo "test_app: ${app}: max_disk $TOTAL blocks."

    # Some installers (like fontxplorer) start a winefile.
    killall winefile.exe
    # wmi starts a server
    killall WinMgmt.exe
    $WINESERVER -w
    echo "Wineserver done."
    ps augxw | grep exe

    test_app_checksums
}

test_install_cached_or_download()
{
    sh winetricks-alpha list-cached list-download > ticd.log
    if grep .------------------- ticd.log
    then
        fail "output of list-cached list-download contained garbage"
        exit 1
    fi
    sort -u < ticd.log | egrep -v "$BLACKLIST" > ticd.verbs
    for a in `cat ticd.verbs`
    do
        test_app $a
    done
    sh winetricks-alpha list-cached > cached.txt
    sh winetricks-alpha list-download > download.txt
    comm -23 download.txt cached.txt > download-but-not-cached.txt
    if test `wc -l < download-but-not-cached.txt` != 0
    then
        fail "test_install_cached_or_download: asked to install all downloadable apps, but some not listed as cached afterwards"
    fi
}

test_speed list
test_speed list-download
test_speed list-cached
test_speed list-installed
test_install_cached_or_download

echo "Test over, $errors failures."
test $errors = 0
